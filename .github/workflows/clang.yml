name: Update Clang Prebuilts

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read 

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *' 
    
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Dependencies
        run: sudo apt update && sudo apt install -qq aria2 git jq

      - name: Fetch latest Clang info
        env:
          AOSP_REPO: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/mirror-goog-main-llvm-toolchain-source"
        run: |
          LATEST_CLANG=$(curl -s "$AOSP_REPO" \
            | grep -oP 'href="[^"]*clang-r[0-9]+/' \
            | grep -oP 'clang-r[0-9]+' \
            | sort -V \
            | tail -n1)
          BUILD_ID=$(curl -fsSL \
            "${AOSP_REPO}/${LATEST_CLANG}/BUILD_INFO?format=TEXT" \
            | base64 -d \
            | jq -r .bid)
          CLANG_VERSION=$(curl -fsSL \
            "${AOSP_REPO}/${LATEST_CLANG}/AndroidVersion.txt?format=TEXT" \
            | base64 -d \
            | head -n1)
          echo "LATEST_CLANG=$LATEST_CLANG" >> "$GITHUB_ENV"
          echo "BUILD_ID=$BUILD_ID" >> "$GITHUB_ENV"
          echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"

      - name: Magic
        env:
          TAG: $LATEST_CLANG
          NEW_BID: $BUILD_ID
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          OLD=$(gh api repos/${REPO}/tags --jq '.[0].name')
          OLD_SUFFIX=${OLD#clang-r}
          OLD_REV=${OLD_SUFFIX%%-*}
          OLD_BID=${OLD_SUFFIX#*-}

          NEW_SUFFIX=${TAG#clang-r}
          NEW_REV=${NEW_SUFFIX%%-*}

          if (( NEW_REV > OLD_REV )) || \
             (( NEW_REV == OLD_REV && NEW_BID > OLD_BID )); then
            RESULT_TAG="clang-r${NEW_REV}-${NEW_BID}"
          else
            RESULT_TAG="$OLD"
          fi

          echo "NEW_TAG=${RESULT_TAG}" >> "$GITHUB_ENV"

      - name: Check if release/tag exists
        id: exists
        env:
          TAG: $NEW_TAG
        run: |
          if git rev-parse --verify --quiet "refs/tags/$TAG" >/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Clang release exists
        if: steps.exists.outputs.exists == 'true'
        run: echo "Latest Clang $NEW_TAG is already released."

      - name: Download Clang
        if: steps.exists.outputs.exists == 'false'
        env:
          LATEST: $LATEST_CLANG
          AOSP_ARCHIVE: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/mirror-goog-main-llvm-toolchain-source"
        run: |
          mkdir -p toolchain
          aria2c -c -x16 -s16 -k4M --file-allocation=falloc \
            -d toolchain \
            -o "${LATEST}.tar.gz" \
            "${AOSP_ARCHIVE}/${LATEST}.tar.gz?format=tar.gz"

      - name: Create or update GitHub Release
        if: steps.exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: $NEW_TAG
          name: Clang prebuilts $NEW_TAG
          files: toolchain/${LATEST_CLANG}.tar.gz

      - name: Telegram Notify
        if: steps.exists.outputs.exists == 'false'
        env:
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TAG_NAME: $LATEST_CLANG
          FULL_TAG: $NEW_TAG
          CLANG_VERSION: $CLANG_VERSION
          HOST: ${{ github.server_url }}
          REPO: ${{ github.repository }}
        run: |
          REPO_URL="$HOST/$REPO"
          BID=${FULL_TAG#clang-r*-}
          
          MESSAGE=$(cat <<EOF
          *Google Clang Prebuilt Update*
          
          *Clang Version*: $CLANG_VERSION ($TAG_NAME)
          *Build ID*: $BID

          *Download tar.gz*:
          [clang $CLANG_VERSION ($TAG_NAME) from build $BID](${REPO_URL}/releases/download/${FULL_TAG}/${TAG_NAME}.tar.gz)
          EOF
          )

          curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d disable_web_page_preview=true \
            -d parse_mode=Markdown \
            -d "text=${MESSAGE}"
